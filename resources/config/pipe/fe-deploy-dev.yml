variables:
    USER_PROJECT: "onlineshop"
    PATH_PROJECT: "/home/${USER_PROJECT}/${CI_PROJECT_NAME}"
    IMAGE_VERSION: "$PORTUS_HOSTNAME/$PORTUS_USER/$PORTUS_REGISTRY_FE:${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}"
    CODECLIMATE_REPORT: "codeclimate-scan_${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}_report"
    SNYKSCAN_REPORT: "synk-scan_${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}_report"
    TRIVYFS_REPORT: "trivyfs-scan_${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}_report"
    TRIVY_IMAGE_REPORT: "security-scan-image_${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}_report"
    ARACHNI_WEBSITE_REPORT: "security-scan-website_${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}_report"


stages:
    - build
    - push
    - deploy to development
    - test source code
    - security scan image
    - security scan website
    - deploy to production

build:
    stage: build
    variables:
        GIT_STRATEGY: clone
    before_script:
        - docker login $PORTUS_HOSTNAME -u $PORTUS_USER -p $PORTUS_PASS
    script:
        - docker build -t $IMAGE_VERSION .
    tags:
        - online-shop-runner-build-shell

push:
    stage: push
    script:
        - ls
        - docker push $IMAGE_VERSION
    tags:
        - online-shop-runner-build-shell

deploy:
    stage: deploy to development
    before_script:
        - docker login $PORTUS_HOSTNAME -u $PORTUS_USER -p $PORTUS_PASS
    script:
        - docker pull $IMAGE_VERSION
        - |
            sudo su ${USER_PROJECT} -c \
            "docker rm -f frontend-container; \
            docker run --name frontend-container -dp $FE_PORT $IMAGE_VERSION"
    tags:
        - online-shop-runner-dev-shell

codeclimate:
    stage: test source code
    variables:
        GIT_STRATEGY: clone
    script:
        - |
            docker run --rm \
            --env CODECLIMATE_CODE="$PWD" \
            --volume "$PWD":/code \
            --volume /var/run/docker.sock:/var/run/docker.sock \
            --volume /tmp/cc:/tmp/cc \
            codeclimate/codeclimate analyze -f html > $CODECLIMATE_REPORT.html
    tags:
        - online-shop-runner-dev-shell
    artifacts:
        paths:
            - $CODECLIMATE_REPORT.html

snyk scan:
    stage: test source code
    variables:
        GIT_STRATEGY: clone
    script:
        - |
            docker build --rm \
            --network host \
            --build-arg SNYK_AUTH_TOKEN=$SNYK_TOKEN \
            --build-arg OUTPUT_FILENAME=$SNYKSCAN_REPORT -t $SNYKSCAN_REPORT -f Dockerfile-snyk .
        - docker create --name $SNYKSCAN_REPORT $SNYKSCAN_REPORT
        - docker cp $SNYKSCAN_REPORT:/app/$SNYKSCAN_REPORT.html .
        - chown gitlab-runner:gitlab-runner $SNYKSCAN_REPORT.html
        - docker rm $SNYKSCAN_REPORT
        - docker rmi $SNYKSCAN_REPORT
    tags:
        - online-shop-runner-dev-shell
    artifacts:
        paths:
            - $SNYKSCAN_REPORT.html

trivy scan image:
    stage: security scan image
    variables:
        GIT_STRATEGY: none
    script:
        - |
            docker run --rm \
            -v $(pwd):/${CI_PROJECT_NAME} \
            -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy image --reset
        - |
            docker run --rm \
            -v $(pwd):/${CI_PROJECT_NAME} \
            -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy image \
            --format template \
            --template "@contrib/html.tpl" \
            --output /${CI_PROJECT_NAME}/$TRIVY_IMAGE_REPORT.html $IMAGE_VERSION
    tags:
        - online-shop-runner-dev-shell
    artifacts:
        paths:
        - $TRIVY_IMAGE_REPORT.html

security scan website:
    stage: security scan website
    variables:
        GIT_STRATEGY: none
    script:
        - |
            docker run --rm \
            -v /tmp/:/tmp/ \
            arachni bin/arachni \
            --output-verbose \
            --scope-include-subdomains $FE_ADDRESS \
            --report-save-path=/tmp/$ARACHNI_WEBSITE_REPORT.afr
        - |
            docker run --rm \
            -v /tmp/:/tmp/ \
            arachni bin/arachni_reporter /tmp/$ARACHNI_WEBSITE_REPORT.afr \
            --reporter=html:outfile=/tmp/$ARACHNI_WEBSITE_REPORT.html.zip
        - sudo chmod 777 /tmp/$ARACHNI_WEBSITE_REPORT.html.zip
        - cp /tmp/$ARACHNI_WEBSITE_REPORT.html.zip .
    tags:
        - online-shop-runner-dev-shell
    artifacts:
        paths:
        - $ARACHNI_WEBSITE_REPORT.html.zip


deploy-prd:
    stage: deploy to production
    variables:
        GIT_STRATEGY: clone
    script:
        - sed -i "s|dynamic_image|$IMAGE_VERSION|" ./manifest/fe-deployment.yml
        - kubectl apply -f ./manifest/fe-deployment.yml
    tags:
        - k8smaster-shell
